==== ./middleware/validateInput.js ====
==== ./middleware/errorHandler.js ====
==== ./public/css/styles.css ====
/* Reset and base styles */

/* Remove default margin and padding from all elements and pseudo-elements */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /* Include padding and border in element's total width and height */
}

/* Set base font properties and background color for the html element */
html {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  font-size: 16px;
  line-height: 1.4;
  color: #222;
  -webkit-font-smoothing: antialiased;
  /* Improve font rendering on WebKit */
  -moz-osx-font-smoothing: grayscale;
  /* Improve font rendering on Firefox */
}

/* Set base styles for body */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  /* Optimize text rendering for speed */
}

/* Remove default styles from links */
a {
  color: inherit;
  text-decoration: none;
}

/* Add underline on hover and focus for better accessibility */
a:hover,
a:focus {
  text-decoration: none;
  outline: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0px;
  padding: 0px;
}

/* Remove default list styles */
ul,
ol {
  list-style: none;
}

/* Remove default button styles */
button {
  background: none;
  border: none;
  cursor: pointer;
  font: inherit;
  /* Inherit font styles for consistency */
}

/* Style form inputs and textareas */
input,
textarea {
  font: inherit;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 0.5em;
  resize: vertical;
  /* Allow vertical resizing only */
}

/* Make images responsive */
img {
  max-width: 100%;
  display: block;
  height: auto;
}

/* main style */

.board {
  min-height: 100vh;
  padding: 2rem;
  background: #f0e6d2;
  box-shadow: inset 0 0 20px #d1c4a1;
}


.head {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.head h1 {
  font-size: 2rem;
  color: #333;
}

.head a {
  padding: 0.5rem 3rem;
  background-color: #222;
  border: none;
  color: white;
  font-weight: bold;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.head a:hover {
  background-color: #222222bc;
}

.messages {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1.5rem 1.5rem;
  perspective: 1200px;
  /* for 3d depth */
}


.item {
  border-radius: 2px;

  box-shadow:
    3px 7px 10px rgba(0, 0, 0, 0.25),
    inset 0 0 10px rgba(255, 255, 255, 0.7);

  color: #333;
  font-weight: 400;
  font-size: 1.3rem;


  transform-style: preserve-3d;
  transform: rotateX(3deg) rotateY(calc(-5deg + 10deg * var(--rotate))) rotateZ(calc(-3deg + 6deg * var(--rotate)));

  transition: transform 0.3s ease, box-shadow 0.3s ease;

  min-height: 260px;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 5;
  -webkit-box-orient: vertical;

  cursor: grab;
  user-select: none;
}


.item:hover {
  transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale(1.05);
  box-shadow:
    5px 15px 20px rgba(0, 0, 0, 0.35),
    inset 0 0 15px rgba(255, 255, 255, 0.8);
  cursor: grabbing;
  z-index: 100;
}

.item a {
  display: block;
  width: 100%;
  height: 100%;
  padding: 15px 20px;
  cursor: grab;

  white-space: normal;
  /* اجازه میده متن به خطوط بعدی بره */
  word-wrap: break-word;
  /* شکستن کلمات بلند */
  overflow-wrap: break-word;
  /* استاندارد جدید برای شکستن کلمات */
}

.detail {
  display: flex;
  flex-direction: column;
  gap: 10px;
  max-width: 700px;
  margin: 0 auto;
  padding: 2rem 4rem;
  box-shadow: 0px 2px 10px 2px rgba(26, 24, 24, 0.558);
  border-radius: 2px;
}

.detail .inf {
  white-space: pre-wrap;
  /* preserve line breaks and wrap text */
  word-wrap: break-word;
  /* allow breaking long words */
  overflow-wrap: break-word;
  /* for new expelorer */
  hyphens: auto;
  /* جاهایی که ممکنه کلمه رو بشکنه */
}

.inf {
  font-size: 1.3rem;
  font-weight: 500;
}

.backBtn {
  text-align: center;
  color: white;
  font-size: 1.4rem;
  font-weight: 500;
  background-color: #222;
  padding: 10px;
  border-radius: 5px;
  text-decoration: none;
  transition: background-color 3ms ease-in;
}

.backBtn:hover {
  text-decoration: none;
  background-color: #222222cf;
}

.notFound {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

@media (max-width: 1068px) {
  .messages {
    grid-template-columns: repeat(3, 1fr);
  }
}


@media (max-width: 768px) {
  .messages {
    grid-template-columns: repeat(2, 1fr);
  }

  .detail {
    padding: 15px;
  }
}


@media (max-width: 440px) {
  .messages {
    grid-template-columns: 1fr;
  }

  .detail {
    padding: 15px;
  }

  .head {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
}==== ./public/css/form.css ====
/* Reset and base styles */

/* Remove default margin and padding from all elements and pseudo-elements */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* Include padding and border in element's total width and height */
}

/* Set base font properties and background color for the html element */
html {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  font-size: 16px;
  line-height: 1.4;
  color: #222;
  -webkit-font-smoothing: antialiased; /* Improve font rendering on WebKit */
  -moz-osx-font-smoothing: grayscale;  /* Improve font rendering on Firefox */
}

/* Set base styles for body */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed; /* Optimize text rendering for speed */
}

/* Remove default styles from links */
a {
  color: inherit;
  text-decoration: none;
}

/* Add underline on hover and focus for better accessibility */
a:hover,
a:focus {
  text-decoration: none;
  outline: none;
}

h1,h2,h3,h4,h5,h6{
    margin: 0px;
    padding: 0px;
}

/* Remove default list styles */
ul,
ol {
  list-style: none;
}

/* Remove default button styles */
button {
  background: none;
  border: none;
  cursor: pointer;
  font: inherit; /* Inherit font styles for consistency */
}

/* Style form inputs and textareas */
input,
textarea {
  font: inherit;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 0.5em;
  resize: vertical; /* Allow vertical resizing only */
}

/* Make images responsive */
img {
  max-width: 100%;
  display: block;
  height: auto;
}

/* form style */
body{
    min-height: 100vh;
    background-color: #f0e6d2;
}

.formSec{
    background-color: aliceblue;
    width: 400px;
    margin: 0 auto;
    padding: 15px 40px;
    border-radius: 10px;
    margin-top: 40px;
    box-shadow: 0px 0px 10px 4px rgba(0, 0, 0, 0.233);
}

.formSec h1{
    text-align: center;
    margin-bottom: 20px;
}

.form{
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.btnGroup{
    display: flex;
    gap: 20px;
    margin-top: 20px;
}

.btnGroup button,a{
    text-align: center;
    width: 100%;
    color: white;
    font-size: 1.2rem;
    font-weight: 500;
    background-color: #222;
    padding: 10px;
    border-radius: 5px;
    text-decoration: none;
    transition: background-color 3ms ease-in;
}

.btnGroup button:hover{
    text-decoration: none;
    background-color: #222222cf;
}

.btnGroup a:hover{
    text-decoration: none;
    background-color: #222222cf;
}

@media (max-width: 420px) {
    .formSec{
        width: 300px;
        padding: 15px 10px;
    }
}==== ./db/populatedb.js ====
#! /usr/bin/env node

require("dotenv").config()

const { Client } = require("pg");


const SQL = `
CREATE TABLE IF NOT EXISTS messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Unique identifier
    user_name VARCHAR(100) NOT NULL,               -- Author's name
    text TEXT NOT NULL,                            -- Message text
    bg_color VARCHAR(20) DEFAULT '#ffffff',        -- Background color
    date DATE -- Creation date
);

INSERT INTO messages (user_name, text, bg_color, date) VALUES
('Adam', 'Hi there!', 'yellow', '2025/02/03'),
('Noah', 'You are also invited to the ship.', '#ff2356', '2025/02/03'),
('Rasool', 'Hello World! My name is rasool and my github is: https://github.com/mutopia7', 'skyBlue', '2025/02/03');
`;

async function main() {
  console.log("seeding..."); 
  
  let client;
  if (process.env.DATABASE_URL) {
      client = new Client({
          connectionString: process.env.DATABASE_URL,
          ssl: { rejectUnauthorized: false }
      });
  } else {
      client = new Client({
          host: process.env.HOST,
          user: process.env.USER,
          password: process.env.PASSWORD,  
          database: process.env.DATABASE,
          port: process.env.DB_PORT
      });
  }

  await client.connect();
  await client.query(SQL);
  await client.end();
  console.log("done");
}

main();
==== ./db/pool.js ====
const { Pool } = require("pg");
require("dotenv").config();

let pool;

if (process.env.DATABASE_URL) {
    pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false }
    });
} else {
    pool = new Pool({
        host: process.env.HOST,
        user: process.env.USER,
        password: process.env.PASSWORD,  
        database: process.env.DATABASE,
        port: process.env.DB_PORT
    });
}

module.exports = pool;
==== ./db/queries.js ====
const pool = require("./pool");

async function getAllMessages() {
    const { rows } = await pool.query("SELECT * FROM messages");
    return rows
}

async function getDetailMessage(id) {
    const { rows } = await pool.query("SELECT * FROM messages WHERE id = $1", [id]);
    return rows[0];
}

async function createMessage(user_name, text, bg_color, date) {
    await pool.query("INSERT INTO messages (user_name, text, bg_color) VALUES ($1, $2, $3, $4)", [user_name, text, bg_color, date])
}


module.exports = {
    getAllMessages,
    getDetailMessage,
    createMessage
}==== ./controllers/messageController.js ====
// messageController.js
const crypto = require("crypto")
const db = require("../db/queries")


async function getMessages(req,res) {
    const dbMessages = await db.getAllMessages();
    res.render("layouts/layout", { messages: dbMessages })
}


async function getDetailMessage(req,res) {
    const id = req.params.messageId;
    const message = await db.getDetailMessage(id);

    if (!message) {
            return res.status(404).render("layouts/404", { id });
    }

    res.render("layouts/messageDetail", { message });    
}


function formRender(req,res) {
    res.render("layouts/form")
}


async function createMessagePost(req,res) {
    try {
        const user_name = req.body.user;
        const text = req.body.text;
        const bg_color = req.body.bgColor;
        const date = req.body.date;
        await db.createMessage(user_name, text, bg_color, date);
        res.redirect("/")
    } catch (err){
        console.error("Error in postForm:", err);
        res.status(500).send("Internal Server Error");
    }
}


module.exports = {
    getMessages,
    getDetailMessage,
    formRender,
    createMessagePost
}==== ./views/messages/list.ejs ====
<!-- list.ejs -->

<li class="item" style="background-color: <%= message.bg_color %> ; --rotate: <%= Math.random().toFixed(2) %>;">
    <a href="/detail/<%= message.id %>" rel="noopener">
    <%= message.text %>
    </a>
</li>==== ./views/messages/detail.ejs ====
<!-- detail.ejs -->

<section class="detail" style="background-color: <%= message.bg_color %>;">
    <h1 style="text-align: center; margin-bottom: 1.3rem;">Message Detail</h1>
    <p>Content: <span class="inf"><%= message.text %> </span></p>
    <p>Author: <span class="inf"><%= message.user_name %> </span></p>
    <p>Created at: <span class="inf"><%= message.date %></span></p>
    <a href="/" class="backBtn" rel="noopener" style="color: <%= message.bg_color %>;">GO BACK</a>
</section>==== ./views/layouts/404.ejs ====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/styles.css">
    <title>404</title>
</head>
<body>
    <main class="notFound board">
        <h1>404 Error</h1>
        <p>Page Not Found</p>
    </main>
</body>
</html>==== ./views/layouts/messageDetail.ejs ====
<!-- messageDetail.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/styles.css">
    <title>Message detail</title>
</head>
<body>
    <main class="board">
        <%- include("../messages/detail" , {message: message}) %>
    </main>
</body>
</html>==== ./views/layouts/layout.ejs ====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/styles.css">
    <title>Memory Board</title>
</head>

<body>
    <main class="board">
        <header class="head">
            <h1>Messages</h1>
            <a href="/new" rel="noopener">Add</a>
        </header>
        <section>
            <ul class="messages">
                <% messages.forEach(message => { %>
                        <%- include("../messages/list", {message: message}) %>
                <% }); %>
            </ul>
        </section>
    </main>
</body>

</html>==== ./views/layouts/form.ejs ====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/form.css">
    <title>New message</title>
</head>

<body>
    <section class="formSec">
        <h1>Create a message</h1>
        <form method="POST" action="/new" class="form">
            <label for="name">AUTHOR</label>
            <input type="text" id="name" name="user">
            <label for="content">CONTENT</label>
            <input type="text" id="content" name="text">
            <label for="date">Date</label>
            <input type="date" id="date" name="date">
            <label for="bgColor">Choose a background color:</label>
            <input type="color" id="bgColor" name="bgColor" value="#ff2356">
            <div class="btnGroup">
                <a href="/" type="button">Cancel</a>
                <button type="submit">Create</button>
            </div>

        </form>
    </section>
</body>

</html>==== ./routes/messageRoutes.js ====
// mesageRouter.js

const express = require("express");
const messageRouter = express.Router();
const controller = require("../controllers/messageController");

messageRouter.get("/:messageId", controller.getDetailMessage);

module.exports = messageRouter;==== ./routes/index.js ====
// index.js

const express = require('express');
const indexRouter = express.Router();
const controller = require('../controllers/messageController')

indexRouter.get('/', controller.getMessages)

module.exports = indexRouter;==== ./routes/formRouter.js ====
const express = require("express");
const formRouter = express.Router();
const controller = require("../controllers/messageController");

formRouter.get("/", controller.formRender);
formRouter.post("/", controller.createMessagePost);

module.exports = formRouter;

==== ./app.js ====
//app.js

const express = require('express');
const app = express();
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const path = require('node:path');

const indexRouter = require("./routes/index");
const mesageRouter = require("./routes/messageRoutes");
const formRouter = require("./routes/formRouter");

require("dotenv").config();


// Security

// Header security
app.use(helmet());

// Limit the number of requests (to prevent brute-force)
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 min
  max: 100, // Maximum request in this period
});
app.use(limiter);

// To capture form data and JSON
app.use(express.json({ limit: "10kb" }));
app.use(express.urlencoded({ extended: true, limit: "10kb" }));



// set view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");


// serving Static Assets
const assetsPath = path.join(__dirname, "public");
app.use(express.static(assetsPath));

app.use('/new', formRouter)
app.use('/detail', mesageRouter)
app.use('/', indexRouter)
app.use((req,res) => {
    res.status(404).render("layouts/404")
})

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`listeing on port: ${PORT}`)
})